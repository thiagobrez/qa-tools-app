a8d9e92ed2fb3680e2833e454036b3bb










'use strict';var _jsxFileName = "/Users/feracode/Repos/qa-tools/qa-tools-app/node_modules/react-native/Libraries/Text/Text.js";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}








































var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var viewConfig = {
  validAttributes: _objectSpread({},
  require('../Components/View/ReactNativeViewAttributes').UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    maxFontSizeMultiplier: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true,
    onTextLayout: true,
    onInlineViewLayout: true,
    dataDetectorType: true }),

  directEventTypes: {
    topTextLayout: {
      registrationName: 'onTextLayout' },

    topInlineViewLayout: {
      registrationName: 'onInlineViewLayout' } },


  uiViewClassName: 'RCTText' };var







TouchableText = function (_React$Component) {require("@babel/runtime/helpers/inherits")(TouchableText, _React$Component);function TouchableText() {var _getPrototypeOf2;var _this;require("@babel/runtime/helpers/classCallCheck")(this, TouchableText);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = require("@babel/runtime/helpers/possibleConstructorReturn")(this, (_getPrototypeOf2 = require("@babel/runtime/helpers/getPrototypeOf")(TouchableText)).call.apply(_getPrototypeOf2, [this].concat(args)));_this.




















    state = _objectSpread({},
    require('../Components/Touchable/Touchable').Mixin.touchableGetInitialState(), {
      isHighlighted: false,
      createResponderHandlers: _this._createResponseHandlers.bind(require("@babel/runtime/helpers/assertThisInitialized")(_this)),
      responseHandlers: null });return _this;}require("@babel/runtime/helpers/createClass")(TouchableText, [{ key: "render", value: function render()















    {
      var props = this.props;
      if (isTouchable(props)) {
        props = _objectSpread({},
        props, {},
        this.state.responseHandlers, {
          isHighlighted: this.state.isHighlighted });

      }
      if (props.selectionColor != null) {
        props = _objectSpread({},
        props, {
          selectionColor: require('../StyleSheet/processColor')(props.selectionColor) });

      }
      if (__DEV__) {
        if (require('../Components/Touchable/Touchable').TOUCH_TARGET_DEBUG && props.onPress != null) {
          props = _objectSpread({},
          props, {
            style: [props.style, { color: 'magenta' }] });

        }
      }
      return (
        require('react').createElement(require('./TextAncestor').Consumer, { __source: { fileName: _jsxFileName, lineNumber: 153 } },
        function (hasTextAncestor) {return (
            hasTextAncestor ?
            require('react').createElement(RCTVirtualText, require("@babel/runtime/helpers/extends")({}, props, { ref: props.forwardedRef, __source: { fileName: _jsxFileName, lineNumber: 156 } })) :

            require('react').createElement(require('./TextAncestor').Provider, { value: true, __source: { fileName: _jsxFileName, lineNumber: 158 } },
            require('react').createElement(RCTText, require("@babel/runtime/helpers/extends")({}, props, { ref: props.forwardedRef, __source: { fileName: _jsxFileName, lineNumber: 159 } }))));}));





    } }, { key: "_createResponseHandlers", value: function _createResponseHandlers()

    {var _this2 = this;
      return {
        onStartShouldSetResponder: function onStartShouldSetResponder() {var
          onStartShouldSetResponder = _this2.props.onStartShouldSetResponder;
          var shouldSetResponder =
          (onStartShouldSetResponder == null ?
          false :
          onStartShouldSetResponder()) || isTouchable(_this2.props);

          if (shouldSetResponder) {
            _this2._attachTouchHandlers();
          }
          return shouldSetResponder;
        },
        onResponderGrant: function onResponderGrant(event, dispatchID) {
          require('nullthrows')(_this2.touchableHandleResponderGrant)(event, dispatchID);
          if (_this2.props.onResponderGrant != null) {
            _this2.props.onResponderGrant.call(_this2, event, dispatchID);
          }
        },
        onResponderMove: function onResponderMove(event) {
          require('nullthrows')(_this2.touchableHandleResponderMove)(event);
          if (_this2.props.onResponderMove != null) {
            _this2.props.onResponderMove.call(_this2, event);
          }
        },
        onResponderRelease: function onResponderRelease(event) {
          require('nullthrows')(_this2.touchableHandleResponderRelease)(event);
          if (_this2.props.onResponderRelease != null) {
            _this2.props.onResponderRelease.call(_this2, event);
          }
        },
        onResponderTerminate: function onResponderTerminate(event) {
          require('nullthrows')(_this2.touchableHandleResponderTerminate)(event);
          if (_this2.props.onResponderTerminate != null) {
            _this2.props.onResponderTerminate.call(_this2, event);
          }
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {var
          onResponderTerminationRequest = _this2.props.onResponderTerminationRequest;
          if (!require('nullthrows')(_this2.touchableHandleResponderTerminationRequest)()) {
            return false;
          }
          if (onResponderTerminationRequest == null) {
            return true;
          }
          return onResponderTerminationRequest();
        } };

    } }, { key: "_attachTouchHandlers", value: function _attachTouchHandlers()




    {var _this3 = this;
      if (this.touchableGetPressRectOffset != null) {
        return;
      }
      for (var key in require('../Components/Touchable/Touchable').Mixin) {
        if (typeof require('../Components/Touchable/Touchable').Mixin[key] === 'function') {
          this[key] = require('../Components/Touchable/Touchable').Mixin[key].bind(this);
        }
      }
      this.touchableHandleActivePressIn = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({ isHighlighted: true });
        }
      };
      this.touchableHandleActivePressOut = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({ isHighlighted: false });
        }
      };
      this.touchableHandlePress = function (event) {
        if (_this3.props.onPress != null) {
          _this3.props.onPress(event);
        }
      };
      this.touchableHandleLongPress = function (event) {
        if (_this3.props.onLongPress != null) {
          _this3.props.onLongPress(event);
        }
      };
      this.touchableGetPressRectOffset = function () {return (
          _this3.props.pressRetentionOffset == null ?
          PRESS_RECT_OFFSET :
          _this3.props.pressRetentionOffset);};
    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps, prevState) {return prevState.responseHandlers == null && isTouchable(nextProps) ? { responseHandlers: prevState.createResponderHandlers() } : null;} }]);return TouchableText;}(require('react').Component);TouchableText.defaultProps = { accessible: true, allowFontScaling: true, ellipsizeMode: 'tail' };TouchableText.viewConfig = viewConfig;


var isTouchable = function isTouchable(props) {return (
    props.onPress != null ||
    props.onLongPress != null ||
    props.onStartShouldSetResponder != null);};

var RCTText = require('../Renderer/shims/createReactNativeComponentClass')(
viewConfig.uiViewClassName,
function () {return viewConfig;});


var RCTVirtualText =
require('../ReactNative/UIManager').getViewManagerConfig('RCTVirtualText') == null ?
RCTText :
require('../Renderer/shims/createReactNativeComponentClass')('RCTVirtualText', function () {return {
    validAttributes: _objectSpread({},
    require('../Components/View/ReactNativeViewAttributes').UIView, {
      isHighlighted: true,
      maxFontSizeMultiplier: true }),

    uiViewClassName: 'RCTVirtualText' };});


var Text = function Text(
props,
forwardedRef)
{
  return require('react').createElement(TouchableText, require("@babel/runtime/helpers/extends")({}, props, { forwardedRef: forwardedRef, __source: { fileName: _jsxFileName, lineNumber: 283 } }));
};
var TextToExport = require('react').forwardRef(Text);
TextToExport.displayName = 'Text';





TextToExport.propTypes = require('../DeprecatedPropTypes/DeprecatedTextPropTypes');

module.exports = TextToExport;